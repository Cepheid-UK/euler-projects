// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

console.log(TriangleNumbers())

function TriangleNumbers () {
    for (i=1; true; i++) {
        // algorithm for generating trianglular numbers:
        var Tn = i*(i+1)*0.5
        var number = Tn;
    
        // p is lowest prime
        var p = 2;
    
        primeFactors = []
    
        // prime factorisation of each triangular number
        while (Tn >= p*p) {
            if (Tn%p == 0) {
                Tn = Tn/p
                primeFactors.push(p)
            } else {
                p++
            }
        }
        primeFactors.push(Tn)
    
        var exponent = 1;
        var exponentsArray = [];
    
        // multiplication principle, the number of divisors is equal to the product of all (exponents of prime factors +1)
        // e.g. Divisors of number 496 = 2^4 * 31
        // (4+1) * (1+1) = 10 divisors
        // 1,2,4,8,16,31,62,124,248,496

        for (j=0; j<primeFactors.length; j++) {
            var prime = primeFactors[j]
            if (primeFactors[j] == primeFactors[j+1]) {
                exponent++
            } else {
                exponentsArray.push(exponent+1) // dont forget the +1
                exponent = 1;
            }
        }
    
        var divisors = 1;
    
        // multiply all the (exponents + 1) together
        for (k=0; k<exponentsArray.length; k++) {
            divisors = divisors * exponentsArray[k];
        }

        // check when a number goes over 500 divisors
        if (divisors >= 500) {
            return number;
        }
    }
}
    
// note to self, read the question. I initially was confused as to why the solution was taking so long, until I re-read and saw it was OVER 500, not EXACTLY 500 divisors.